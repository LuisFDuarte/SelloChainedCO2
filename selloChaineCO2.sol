//Begin
// SPDX-License-Identifier: MIT
pragma solidity 0.8.6; // Revisar si se requiere version superior

import "@chainlink/contracts/src/v0.8/KeeperCompatible.sol";
import "@openzeppelin/contracts@4.6.0/token/ERC721/extensions/ERC721URIStorage.sol";
import "@openzeppelin/contracts@4.6.0/utils/Counters.sol";

contract selloChaineCO2 is ERC721, ERC721URIStorage, KeeperCompatibleInterface {
    using Counters for Counters.Counter;

    Counters.Counter public tokenIdCounter;
 
   // Falta actualizar con los metadatos correctos TODO
    string[] IpfsUri = [
        "https://gateway.pinata.cloud/ipfs/QmZxYGR2R4Q2mnpcPcQtPM799MXSZGhLSTqNS6Gshcem35",
        "https://gateway.pinata.cloud/ipfs/QmT8KYJsNDXSYdyS2Vqkz3NGgp15SicRHXeEvSxkg1tnsZ",
        "https://gateway.pinata.cloud/ipfs/QmYXHC8gVtwZaDYqabzPWYf6AZe1hMTvUCS6Jjk9EpuSGz",
        "https://gateway.pinata.cloud/ipfs/QmcHJY8CZAF5E9ouoFTYY1qMzDJKitC29CBNkehH3WUoyu",
        "https://gateway.pinata.cloud/ipfs/QmdWQe6ZyqzDPQHmiCMZ3NaHBZEqJe6VGnV1AWbveM5HQR",
        "https://gateway.pinata.cloud/ipfs/QmdWQe6ZyqzDPQHmiCMZ3NaHBZEqJe6VGnV1AWbveM5HQR",
        "https://gateway.pinata.cloud/ipfs/QmdWQe6ZyqzDPQHmiCMZ3NaHBZEqJe6VGnV1AWbveM5HQR",
        "https://gateway.pinata.cloud/ipfs/QmdWQe6ZyqzDPQHmiCMZ3NaHBZEqJe6VGnV1AWbveM5HQR",
        "https://gateway.pinata.cloud/ipfs/QmdWQe6ZyqzDPQHmiCMZ3NaHBZEqJe6VGnV1AWbveM5HQR",
        "https://gateway.pinata.cloud/ipfs/QmdWQe6ZyqzDPQHmiCMZ3NaHBZEqJe6VGnV1AWbveM5HQR",
    ]; 

    uint256 lastTimeStamp;
    uint256 interval;

    constructor(uint _interval) ERC721("Sello Chained CO2", "SCCO2") {
        interval = _interval;
        lastTimeStamp = block.timestamp;
    }

    // se debe revisar estas funciones para hacer la conexion con Chainlink TODO
    function checkUpkeep(bytes calldata /* checkData */) external view override returns (bool upkeepNeeded, bytes memory /* performData */) {
        uint256 tokenId = tokenIdCounter.current() - 1;
        bool done;
        if (flowerStage(tokenId) >= 2) { // se debe revisar la condicion de paro TODO
            done = true;
        }

        upkeepNeeded = !done && ((block.timestamp - lastTimeStamp) > interval);        
        // We don't use the checkData in this example. The checkData is defined when the Upkeep was registered.
    }

    // se debe revisar estas funciones para hacer la conexion con Chainlink TODO
    function performUpkeep(bytes calldata /* performData */) external override {
        //We highly recommend revalidating the upkeep in the performUpkeep function
        if ((block.timestamp - lastTimeStamp) > interval ) {
            lastTimeStamp = block.timestamp;            
            uint256 tokenId = tokenIdCounter.current() - 1;
            changeRenewableLevel(tokenId);
        }
        // We don't use the performData in this example. The performData is generated by the Keeper's call to your checkUpkeep function
    }
    // funcion para producir NFTs
    function safeMint(address to) public {
        uint256 tokenId = tokenIdCounter.current();
        tokenIdCounter.increment();
        _safeMint(to, tokenId);
        _setTokenURI(tokenId, IpfsUri[0]);
    }

    function changeRenewableLevel(uint256 _tokenId) public {
        if(sustainableStage(_tokenId) >= 9){return;} // Revisar esta condicion TODO
        // newval debe depender del valor de sostenibilidad del pais  no aumentar TODO
        uint256 newVal = sustainableStage(_tokenId) + 1;
        // almacena la nueva URI
        string memory newUri = IpfsUri[newVal];
        // actualiza la nueva URI
        _setTokenURI(_tokenId, newUri);
    }

    // determina el nivel de sostenibilidad dependiendo del porcentaje de carbono en la gen
    function sustainableStage(uint256 _tokenId) public view returns (uint256) {
        string memory _uri = tokenURI(_tokenId);
        // Porcentaje de 0 a 10
        if (compareStrings(_uri, IpfsUri[0])) {
            return 0;
        }
        // Porcentaje de 10 a 20
        if (compareStrings(_uri, IpfsUri[1]) ) {
            return 1;
        }
        // Porcentaje de 20 a 30
        if (compareStrings(_uri, IpfsUri[2]) ) {
            return 2;
        }
        // Porcentaje de 30 a 40
        if (compareStrings(_uri, IpfsUri[3]) ) {
            return 3;
        }
        // Porcentaje de 40 a 50
        if (compareStrings(_uri, IpfsUri[4]) ) {
            return 4;
        }
        // Porcentaje de 60 a 70
        if (compareStrings(_uri, IpfsUri[5]) ) {
            return 5;
        }
        // Porcentaje de 70 a 80
        if (compareStrings(_uri, IpfsUri[6]) ) {
            return 6;
        }
        // Porcentaje de 80 a 90
        if (compareStrings(_uri, IpfsUri[7]) ) {
            return 7;
        }
        // Porcentaje de 90 a 100
        if (compareStrings(_uri, IpfsUri[8]) ) {
            return 8;
        }
        // Porcentaje 100
        return 9;
    }


    // funcion para comparar cadenas
    function compareStrings(string memory a, string memory b)
        public
        pure
        returns (bool)
    {
        return (keccak256(abi.encodePacked((a))) ==
            keccak256(abi.encodePacked((b))));
    }

    //  override  de funcion requerida por Solidity.
    function _burn(uint256 tokenId)
        internal
        override(ERC721, ERC721URIStorage)
    {
        super._burn(tokenId);
    }

    // override  de funcion requerida por Solidity.
    function tokenURI(uint256 tokenId)
        public
        view
        override(ERC721, ERC721URIStorage)
        returns (string memory)
    {
        return super.tokenURI(tokenId);
    }
}
